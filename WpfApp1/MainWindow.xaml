<Window
    x:Class="ConveyorApp.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:avalonEdit="http://icsharpcode.net/sharpdevelop/avalonedit"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:gu="https://github.com/JohanLarsson/Gu.Wpf"
    xmlns:local="clr-namespace:ConveyorApp"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:mx="clr-namespace:WpfLib.MarkupExtensions;assembly=WpfLib"
    xmlns:scg="clr-namespace:System.Collections.Generic;assembly=netstandard"
    xmlns:system="clr-namespace:System;assembly=mscorlib"
    xmlns:conv="clr-namespace:WpfLib.Converters;assembly=WpfLib"
    xmlns:ctrl="clr-namespace:ControlsLib.Wpf;assembly=ControlsLib.Wpf"
    Name="TheWindow"
    Title="MainWindow"
    Width="792"
    Height="442"
    Closing="Window_Closing"
    PreviewKeyDown="Window_PreviewKeyDown"
    mc:Ignorable="d"
    d:DataContext="{d:DesignInstance local:MainWindowViewModel, IsDesignTimeCreatable=True}"
    >
    <!--DataContext="{Binding RelativeSource={RelativeSource Self}}"--> 

    <Window.Resources>
        <Brush x:Key="SplitterColor">red</Brush>
        <Brush x:Key="BackgroundColor">green</Brush>
        <system:Double x:Key="SplitterSize">5</system:Double>
        <x:Array x:Key="KEKSELIST" Type="system:String">
            <system:String>Hallo</system:String>
            <system:String>Welt</system:String>
        </x:Array>
        <Style x:Key="CommonGridSplitter" TargetType="{x:Type GridSplitter}">
            <Setter Property="Background" Value="{StaticResource SplitterColor}" />
        </Style>
        <Style
            x:Key="HorizontalGridSplitter"
            BasedOn="{StaticResource CommonGridSplitter}"
            TargetType="{x:Type GridSplitter}">
            <Setter Property="Height" Value="{StaticResource SplitterSize}" />
            <Setter Property="HorizontalAlignment" Value="Stretch" />
            <Setter Property="VerticalAlignment" Value="Center" />
        </Style>
        <Style
            x:Key="VerticalGridSplitter"
            BasedOn="{StaticResource CommonGridSplitter}"
            TargetType="{x:Type GridSplitter}">
            <Setter Property="Width" Value="{StaticResource SplitterSize}" />
            <Setter Property="VerticalAlignment" Value="Stretch" />
            <Setter Property="HorizontalAlignment" Value="Center" />
        </Style>
        <Grid
            x:Key="AddLineSegmentButtonContent"
            x:Name="AddLineSegmentButtonContent"
            gu:Grid.Layout="*,* *">
            <TextBlock Grid.Column="0" Text="⊢" />
            <TextBlock
                Grid.Column="1"
                Margin="-3,0,0,0"
                Text="⊣" />
        </Grid>
    </Window.Resources>

    <Grid gu:Grid.Layout="auto * auto, * auto 130">
        <StackPanel
            Grid.ColumnSpan="3"
            gu:Cell.Index="0 0"
            Orientation="Vertical">
            <StackPanel.Resources>
                <Style TargetType="{x:Type Button}">
                    <Setter Property="Margin" Value="0,0,10,0" />
                </Style>
                <Style TargetType="{x:Type StackPanel}">
                    <Setter Property="Margin" Value="0,2,0,2" />
                </Style>
                <Style TargetType="{x:Type CheckBox}">
                    <Setter Property="Margin" Value="0,0,10,0" />
                    <Setter Property="VerticalAlignment" Value="Center" />
                </Style>
                <Style TargetType="{x:Type TextBox}">
                    <Setter Property="Margin" Value="0,0,10,0" />
                </Style>
            </StackPanel.Resources>
            <StackPanel Name="ButtonsSP" Orientation="Horizontal">
                <Button
                    Name="DebugB"
                    Click="DebugB_Click"
                    Content="Debug"
                    ToolTip="Debug" />
                <Button
                    Name="SelectB"
                    Click="SelectB_Click"
                    Content="Select" />
                <d:ItemsControl
                    d:ItemsSource="{x:Static local:CreationCommandManager.CommandLabels}"
                    d:MinWidth="50">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <StackPanel Background="green" Orientation="Horizontal" />
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <Button Content="{Binding}" />
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </d:ItemsControl>
            </StackPanel>
            <StackPanel Orientation="Horizontal">
                <CheckBox
                    Content="Running"
                    IsChecked="{Binding IsRunning}"/>
                <Button
                    Name="PutItemB"
                    Click="PutItemB_Click"
                    Content="Put"
                    ToolTip="Put Items" />
                <CheckBox Name="FirstOnlyCB" Content="FirstOnly" />
                <Button
                    Name="MovePointB"
                    Click="MovePointB_Click"
                    Content="Move" />
                <TextBox
                    Name="LanesCountTB"
                    Text="{Binding LaneCount}"
                    ToolTip="Lanes Count" 
                    MinWidth="20"
                    
                    />
                <TextBox
                    Name="GridWidth"
                    Width="30"
                    Text="{Binding Path=SnapGridWidth, Converter={conv:MultiConverter}}"
                    ToolTip="Grid Width" />
                <Button
                    Name="HappyBirthdayRubyB"
                    Click="HappyBirthdayRubyB_Click"
                    Content="Happy Birthday Ruby" />
                <Button
                    Name="SaveContentsB"
                    Click="SaveB_Click"
                    Content="Save..." />
                <Button
                    Name="LoadContentsB"
                    Click="LoadB_Click"
                    Content="Load..." />
            </StackPanel>

        </StackPanel>
        <TextBlock
            Grid.ColumnSpan="2"
            gu:Cell.Index="2 0"
            Text="{Binding StatusBarHelpText}" />
        <GridSplitter gu:Cell.Index="1 1" Style="{StaticResource VerticalGridSplitter}" />
        <Grid gu:Cell.Index="1 2" gu:Grid.Layout="20 auto * auto 40, *">
            <TextBlock gu:Cell.Index="0 0" Text="{Binding Path=SelectionManager.ChosenObject.Text}" />
            <GridSplitter Grid.Row="1" Style="{StaticResource HorizontalGridSplitter}" />
            <ctrl:PropertyGrid gu:Cell.Index="2 0" InspectedObject="{Binding SelectionManager.ChosenObject}" />
            <GridSplitter Grid.Row="3" Style="{StaticResource HorizontalGridSplitter}" />
            <avalonEdit:TextEditor
                Name="textEditor2"
                gu:Cell.Index="4 0"
                FontFamily="Fira Code"
                FontSize="5pt"
                SyntaxHighlighting="C#" />
        </Grid>
        <Grid gu:Cell.Index="1 0" gu:Grid.Layout="* auto auto, *">
            <ScrollViewer
                gu:Cell.Index="0 0"
                HorizontalScrollBarVisibility="Hidden"
                VerticalScrollBarVisibility="Hidden">
                <Canvas Name="TheCanvas" MouseWheel="TheCanvas_MouseWheel">
                    <Canvas.Background>
                        <DrawingBrush
                            AlignmentX="Left"
                            AlignmentY="Top"
                            Stretch="None"
                            TileMode="Tile"
                            Viewport="{Binding SnapGridWidth, Converter={conv:WidthToRectConverter X=-0.5, Y=-0.5}}"
                            ViewportUnits="Absolute">
                            <DrawingBrush.Drawing>
                                <DrawingGroup>
                                    <DrawingGroup.Children>
                                        <GeometryDrawing Brush="{StaticResource BackgroundColor}">
                                            <GeometryDrawing.Geometry>
                                                <RectangleGeometry 
                                                    Rect="{Binding SnapGridWidth, Converter={conv:WidthToRectConverter}}" 
                                                    />
                                            </GeometryDrawing.Geometry>
                                            <GeometryDrawing.Pen>
                                                <Pen Brush="{StaticResource BackgroundColor}" />
                                            </GeometryDrawing.Pen>
                                        </GeometryDrawing>
                                        <GeometryDrawing Brush="WhiteSmoke">
                                            <GeometryDrawing.Geometry>
                                                <EllipseGeometry RadiusX="0.5" RadiusY="0.5" />
                                            </GeometryDrawing.Geometry>
                                        </GeometryDrawing>
                                    </DrawingGroup.Children>
                                </DrawingGroup>
                            </DrawingBrush.Drawing>
                        </DrawingBrush>
                    </Canvas.Background>
                    <!--<ItemsControl Name="SnapGridIC"
                                  ItemsSource="{mx:MultiBinding {Binding ElementName=TheCanvas, Path=ActualWidth},
                                                                {Binding ElementName=TheCanvas, Path=ActualHeight},
                                                                {Binding Path=SnapGridWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:MainWindow}},
                                                                Converter= {conv:SnapGridConverter}}"
                                  Visibility="Visible">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <Canvas />
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemContainerStyle>
                            <Style TargetType="ContentPresenter">
                                <Setter Property="Canvas.Left" Value="{Binding Path=X}" />
                                <Setter Property="Canvas.Top" Value="{Binding Path=Y}" />
                            </Style>
                        </ItemsControl.ItemContainerStyle>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <Ellipse Width="1" Height="1" Fill="WhiteSmoke" />
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>-->
                    <Canvas.RenderTransform>
                        <TransformGroup>
                            <ScaleTransform x:Name="CanvasScaleTransform" />
                            <TranslateTransform
                                X="{Binding PanValue.X}"
                                Y="{Binding PanValue.Y}"/>
                        </TransformGroup>
                    </Canvas.RenderTransform>
                </Canvas>
            </ScrollViewer>
            <GridSplitter Grid.Row="1" Style="{StaticResource HorizontalGridSplitter}" />
            <Grid gu:Cell.Index="2 0" gu:Grid.Layout="* , * auto">
                <avalonEdit:TextEditor
                    Name="textEditor"
                    gu:Cell.Index="0 0"
                    FontFamily="Fira Code"
                    FontSize="7pt"
                    SyntaxHighlighting="C#">
                    $.AddConveyor(new V2d[]{(40, 50), (120, 90), (210, 60)}, false, 2);
                    $.AddConveyor(new V2d[]{(70, 100), (70, 140), (70, 170)}, false, 2);
                    $.AddConveyor(new V2d[]{(90, 100), (90, 140), (90, 170)}, false, 2);
                    $.AddConveyor(new V2d[]{(120, 100), (150, 120), (160, 150)}, false, 2);
                    $.AddConveyor(new V2d[]{(120, 90), (150, 90)}, false, 2);
                    $.AddConveyor(new V2d[]{(120, 160), (150, 160), (150, 180)}, false, 2);
                    $.AddConveyor(new V2d[]{(170, 160), (180, 160), (180, 150), (190, 150), (190, 160), (200, 160)}, false, 2);
                    $.AddConveyor(new V2d[]{(20, 20), (30, 30), (40, 20), (50, 30), (40, 40), (50, 50)}, false, 2);
                    $.AddConveyor(new V2d[]{(10, 30), (20, 40), (10, 50), (20, 60), (30, 50), (40, 60)}, false, 2);
                    $.AddConveyor(new V2d[]{(80, 30), (110, 30), (170, 20), (190, 20)}, false, 2);
                    $.AddConveyor(new V2d[]{(80, 40), (110, 40), (170, 40), (190, 40)}, false, 2);
                    $.AddConveyor(new V2d[]{(80, 50), (110, 50), (170, 60), (190, 60)}, false, 2);
                </avalonEdit:TextEditor>
                <Button
                    Name="RunB"
                    gu:Cell.Index="0 1"
                    Click="RunB_Click"
                    IsEnabled="False">
                    <TextBlock>
                        <TextBlock.LayoutTransform>
                            <RotateTransform Angle="90" CenterX="0.5" CenterY="0.5" />
                        </TextBlock.LayoutTransform>
                        Run
                    </TextBlock>
                </Button>
            </Grid>
        </Grid>
    </Grid>
</Window>
