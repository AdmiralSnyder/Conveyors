@using Blazor.Extensions.Canvas
@using Blazor.Extensions;
@using ConveyorLib.Objects;
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager Navigation

<CanvasComponent Width="500" Height="500" Style="z-index:1;position:absolute;left:0;top:200px;" @ref=TheCanvas 
CanvasClick=OnMouseClick 
CanvasMouseMove=OnMouseMove/>
@* <CanvasComponent Width="500" Height="500" Style="z-index:2;position:absolute;left:0;top:200px;" @ref=EventCaptureCanvas CanvasClick=OnMouseClick /> *@


@code
{
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (hubConnection is null)
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/conveyorhub"))
                .Build();

            hubConnection.On<string, string>("ReceiveMessage", async (user, message) =>
            {
                await AppContent.ScriptRunner.RunScript(message);
                await InvokeAsync(StateHasChanged);
            });

            await hubConnection.StartAsync();
        }

        AppContent.InputContext.OnNotify += () => InvokeAsync(StateHasChanged);
    }

    private BECanvasComponent TheCanvas { get; set; }
    // private BECanvasComponent EventCaptureCanvas { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        var ctx = await TheCanvas.CreateCanvas2DAsync();
        await ctx.BeginBatchAsync();
        await ctx.ClearRectAsync(0, 0, 500, 500);
        await ctx.SetFillStyleAsync("#008000");
        await ctx.FillRectAsync(0, 0, 500, 500);

        foreach (var obj in AppContent.CanvasInfo.Canvas.Children.ToList())
        {
            await obj.DrawAsync(ctx);
        }

        await ctx.EndBatchAsync();

        // var ctx2 = await EventCaptureCanvas.CreateCanvas2DAsync();
        // await ctx2.ClearRectAsync(0, 0, 500, 500);
        // await ctx2.SetFillStyleAsync("#80808080");
        // await ctx2.FillRectAsync(100, 100, 200, 200);
    }

    private void OnMouseClick(MouseEventArgs mea)
    {
        AppContent.CanvasInfo.Canvas.DoMouseClick(mea);
    }

    private void OnMouseMove(MouseEventArgs mea)
    {
        AppContent.CanvasInfo.Canvas.DoMouseMove(mea);
    }
}
