@using Blazor.Extensions.Canvas;
@using Blazor.Extensions.Canvas.Canvas2D;
@using Blazor.Extensions;
@using ConveyorLib.Objects;
@using InputLib;
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager Navigation

<CanvasComponent Width="500" Height="500" 
    Style=@($"z-index:1;position:absolute;left:0;top:200px;") @ref=TheCanvas 
    />
    @* CanvasClick=OnMouseClick  *@
<CanvasComponent Width="500" Height="500" 
    Style=@($"z-index:2;position:absolute;left:0;top:200px;cursor:{(Cursor == InputCursors.Hand ? "move" : "unset" )};") @ref=EventCaptureCanvas 
    CanvasClick=OnMouseClick CanvasMouseMove=OnMouseMove />


@code
{
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (hubConnection is null)
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/conveyorhub"))
                .Build();

            hubConnection.On<string, string>("ReceiveMessage", async (user, message) =>
            {
                await AppContent.ScriptRunner.RunScript(message);
                await InvokeAsync(DoReRender);
            });

            await hubConnection.StartAsync();
        }

        AppContent.InputContext.OnNotify += () => InvokeAsync(DoReRender);
        AppContent.InputContext.OnNotifyTemp += () => InvokeAsync(DoReRenderTemp);

        AppContent.InputContext.OnCursorChanged += (sender, args) => Cursor = args;
    }

    private CanvasComponent TheCanvas { get; set; }
    private BECanvasComponent EventCaptureCanvas { get; set; }


    private void DoReRender()
    {
        renderNeeded = true;
        tempRenderNeeded = true;
        StateHasChanged();
    }

    private void DoReRenderTemp()
    {
        tempRenderNeeded = true;
        StateHasChanged();
    }

    private Canvas2DContext CanvasContext;
    private Canvas2DContext CanvasContextTemp;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (renderNeeded)
        {
            CanvasContext ??= await TheCanvas.CreateCanvas2DAsync();
            await CanvasContext.BeginBatchAsync();
            await CanvasContext.ClearRectAsync(0, 0, 500, 500);
            await CanvasContext.SetFillStyleAsync("#008000");
            await CanvasContext.FillRectAsync(0, 0, 500, 500);

            foreach (var obj in AppContent.CanvasInfo.Canvas.Children.ToList())
            {
                await obj.DrawAsync(CanvasContext);
            }

            await CanvasContext.EndBatchAsync();
        }

        CanvasContextTemp = await EventCaptureCanvas.CreateCanvas2DAsync();
        if (tempRenderNeeded || AppContent.CanvasInfo.Canvas.TempChildren.Any())
        {
            tempRenderNeeded = false;
            await CanvasContextTemp.BeginBatchAsync();
            await CanvasContextTemp.ClearRectAsync(0, 0, 500, 500);
            foreach (var obj in AppContent.CanvasInfo.Canvas.TempChildren.ToList())
            {
                await obj.DrawAsync(CanvasContextTemp);
            }
            await CanvasContextTemp.EndBatchAsync();
        }
        else
        {
            // await CanvasContextTemp.BeginBatchAsync();

            await CanvasContextTemp.ClearRectAsync(0, 0, 500, 500);
            // await CanvasContextTemp.EndBatchAsync();

        }
    }

    private void OnMouseClick(MouseEventArgs mea)
    {
        AppContent.CanvasInfo.Canvas.DoMouseClick(mea);
    }

    private bool renderNeeded = true;
    private bool tempRenderNeeded = false;

    private void SkipRender() => renderNeeded = false;

    private void OnMouseMove(MouseEventArgs mea)
    {
        SkipRender();
        AppContent.CanvasInfo.Canvas.DoMouseMove(mea);

    }

    // protected override bool ShouldRender()
    // {
    //     var result = renderNeeded && base.ShouldRender();

    //     return result;
    // }

    private InputCursors _Cursor = InputCursors.Arrow;
    private InputCursors Cursor
    {
        get => _Cursor;
        set => Func.Setter(ref _Cursor, value, async () => await InvokeAsync(DoReRender));
    }
}
