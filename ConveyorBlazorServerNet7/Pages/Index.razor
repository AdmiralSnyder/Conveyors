@page "/"
@using ConveyorBlazorServerNet7.Components
@using ConveyorInputLib;
@using ConveyorLib.Objects.Conveyor;
@using Microsoft.AspNetCore.SignalR.Client;
@using ConveyorInputLib.Inputters;
@using ConveyorBlazorServerNet7.Inputters;
@using UILib.Shapes;

<button @onclick=MoveButtonClick disabled=@MoveButtonDisabled>Move</button>
<button @onclick=SelectButtonClick>Select 1</button>
<button @onclick=SelectButtonInfinityClick>Select ∞</button>
<button @onclick=DrawButtonInfinityClick>Draw</button>
@foreach (var x in CreationCommandManager.StaticCommands)
{
    <button @onclick=@(async () => await CommandManager.Invoke(x.Value))>@(x.Key.Item2 ?? x.Key.Item1)</button>
}

<Canvas />

@code
{
    private bool MoveButtonDisabled { get; set; }

    private static CreationCommandManager CommandManager { get; set; }

    protected override Task OnInitializedAsync()
    {
        CommandManager = new CreationCommandManager();
        CommandManager.InputContext = AppContent.InputContext;
        CommandManager.AutoRoot = AutoRoot;
        CommandManager.AfterCommandAction = () => AppContent.InputContext.Notify();

        return base.OnInitializedAsync();
    }

    async void MoveButtonClick()
    {
        MoveButtonDisabled = true;
        StateHasChanged();
        await MoveConveyorPointInputter.StartInputOnce(AppContent.InputContext).Then(AutoRoot.MovePoint);

        MoveButtonDisabled = false;
        StateHasChanged();
    }

    async void AddCircleCenterRadiusButtonClick() => await CircleCenterRadiusInputter.StartInputOnce(AppContent.InputContext)
        .Then(x => AutoRoot.AddCircleCenterRadius(x));

    ObjectHighlighter DummyHighlighter;

    void SelectItem(IEnumerable<ISelectObject> selectedObjects)
    {
        var currentID = AutoRoot.GetSelectObjects().FirstOrDefault()?.ID ?? null;
        string id = null;
        var firstObj = selectedObjects.First();
        var firstId = firstObj.ID;
        if (selectedObjects.Count() == 1)
        {
            var x = firstObj.GetSelectRoot();
            id = x.ID;
        }
        else
        {
            id = firstId;
            bool found = false;
            foreach (var selObj in selectedObjects)
            {
                var x = selObj;
                x = x.GetSelectRoot();
                if (found)
                {
                    id = x.ID;
                    found = false;
                    break;
                }
                if (x is IIdentity iid)
                {
                    if (iid.ID == currentID)
                    {
                        found = true;
                        continue;
                    }
                }
            }
            if (found)
            {
                id = firstId;
            }
        }

        if (id is not null)
        {
            AutoRoot.SelectItem(id);
            AppContent.InputContext.Notify();
        }

    }

    async void SelectButtonClick() => await SingleClickSelectInputter.StartInputOnce(AppContent.InputContext).Then(SelectItem);
    async void SelectButtonInfinityClick() => await SingleClickSelectInputter.StartInputContinuous(AppContent.InputContext).Then(SelectItem);
    async void DrawButtonInfinityClick() => await SingleClickSelectInputter.StartInputContinuous(AppContent.InputContext).Then(SelectItem);
    

        // await SingleClickSelectInputter.StartInputContinuous(AppContent.InputContext).Then(SelectItem);

        

        // if (AutoRoot.Conveyors.FirstOrDefault() is { } first)
        // {
        //     AutoRoot.SelectItem(first.ID);
        //     AppContent.InputContext.Notify();

        //     // DummyHighlighter = UIHelpers.CreateObjectHighlighter(AppContent.CanvasInfo, first, ObjectHighlightTypes.Select);
        //     // AppContent.InputContext.Notify();
        // }
    
}
